{"version":3,"file":"Player.js","sourceRoot":"","sources":["../../../src/types/binering/Player.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug } from 'svelte/internal';\nimport { parseCardInfo, messageBox } from '../utils';\nimport { Deck } from './Deck';\nimport { Color, Trash } from './Trash';\n\nexport interface MoveEventInfo {\n  playedCard: boolean;\n  player: Player;\n}\nexport class Player {\n  public onRemoveCard?: (data: MoveEventInfo) => Promise<void>;\n  public name: string = '';\n  readonly id: number;\n  private _isComputer: boolean = false;\n  public score: number = 0;\n  public get isComputer() {\n    return this._isComputer;\n  }\n  decks: Array<Deck>;\n  private _turn?: boolean;\n  public get turn() {\n    return this._turn!;\n  }\n  public set turn(val: boolean) {\n    this._turn = val;\n  }\n  trash?: Trash;\n\n  //private _deckTemplate = [true, false];\n  //32 cards\n  private _allcards = [\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n    true,\n    false,\n  ];\n  private _deckTemplate = [true, false, true, false, true, false, true, false];\n  public counter: number = 0;\n  constructor(id: number, name: string, isComputer: boolean) {\n    this.id = id;\n    this.name = name;\n    const decks = this.generate_random_Decks();\n\n    this.decks = decks;\n    this.trash = new Trash(this.id);\n    this._isComputer = isComputer;\n    this.convertBytesToLocaion();\n  }\n  public new_round() {\n    const decks = this.generate_random_Decks();\n    this.decks = decks;\n    this.trash = new Trash(this.id);\n  }\n\n  generate_random_Decks() {\n    // var deck1 = new Deck(this.id, 'a', this.shuffle([...this._deckTemplate]));\n    // var deck2 = new Deck(this.id, 'b', this.shuffle([...this._deckTemplate]));\n    // var deck3 = new Deck(this.id, 'c', this.shuffle([...this._deckTemplate]));\n    // var deck4 = new Deck(this.id, 'd', this.shuffle([...this._deckTemplate]));\n\n    var _shfl = this.shuffle([...this._allcards]);\n\n    var decks = this.chunk(_shfl, 8);\n    var deck1 = new Deck(this.id, 'a', decks[0]);\n    var deck2 = new Deck(this.id, 'b', decks[1]);\n    var deck3 = new Deck(this.id, 'c', decks[2]);\n    var deck4 = new Deck(this.id, 'd', decks[3]);\n\n    return [deck1, deck2, deck3, deck4];\n  }\n  public getDeck(key: string) {\n    return this.decks.find(i => i.id == key);\n  }\n  public can_Card_Transfer_To_Oponent(): boolean {\n    if (this.trash!.selectedCard == Color.NotSelected) return false;\n    // Always you can attack\n    return true;\n    // Deck Can not Be empty\n    // if (this.isThereEmptyDeck()) {\n    //   return false;\n    // }\n    // If there is not possible card to remove\n    // return this.decks.every(\n    //   dec => dec.cards[dec.cards.length - 1] != this.trash?.value\n    // );\n  }\n  shuffle(array: boolean[]) {\n    let currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex != 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n\n  public get_location() {\n    return this.convertBytesToLocaion();\n  }\n\n  getColor() {\n    var color: any = [];\n\n    color.push(this.decks[0].getDecimal());\n    color.push(this.decks[1].getDecimal());\n    color.push(this.decks[3].getDecimal());\n    color.push(this.decks[3].getPercentage());\n\n    return `rgba(${color.join()})`;\n  }\n\n  private convertBytesToLocaion() {\n    // var hex =\n    //   this.decks[0].getHex() +\n    //   this.decks[1].getHex() +\n    //   this.decks[2].getHex() +\n    //   this.decks[3].getHex();\n\n    var r2 =\n      this.decks[0].getDecimal() +\n      this.decks[1].getDecimal() +\n      this.decks[2].getDecimal() +\n      this.decks[3].getDecimal();\n\n    // var baseVal = Number(nums); //parseInt(hex, 16);\n    // var r1 = baseVal / 30000;\n    // var r2 = r1 / 60;\n\n    if (this.isLatitute) {\n      if (r2 > 90) {\n        // it is latitute. should not be more that 90.\n        r2 = (((r2 % 180) + 180 + 90) % 180) - 90;\n      }\n      //console.log('Latitute');\n    } else {\n      // It is longtitute. Should not be more than 180\n      if (r2 > 180) {\n        r2 = (((r2 % 360) + 360 + 180) % 360) - 180;\n      }\n      //console.log('Longtitute');\n    }\n    //console.log('*****************');\n    return r2.toString(); //Math.round(r2).toString();\n  }\n\n  public get isLatitute(): boolean {\n    // if the game is at the begginin, make the left side latitute\n    if (this.trash?.selectedCard == Color.NotSelected) {\n      if (this.id == 1) return true;\n      else return false;\n    }\n\n    // for Zero or Red card is latitude\n    if (this.trash!.value == false) return true;\n    else return false; // One or Blue card is longtitute\n  }\n\n  public remainedCard() {\n    var count = 0;\n    this.decks.forEach(\n      dec => (count += dec.howManyRemained(this.trash?.value!))\n    );\n    return count;\n  }\n\n  private isThereEmptyDeck(): boolean {\n    return this.decks.some(dec => dec.cards.length == 0);\n  }\n  public async remove_card(data: string) {\n    if (!this.can_card_removable(data)) return; // double check if the card can be removable\n    var result = parseCardInfo(data);\n    if (result?.dataIsValid == false) return;\n\n    // it is not my turn to move\n    if (this.turn == false) return;\n\n    var dec = this.decks.find(i => i.id == result?.deckId);\n    dec?.removeSimilarCardsFromLastPosition();\n\n    if (this.onRemoveCard) {\n      await this.onRemoveCard({ player: this, playedCard: result?.value! });\n    }\n  }\n\n  public can_card_removable(input: string): boolean {\n    const result = parseCardInfo(input);\n\n    if (result.dataIsValid == false) return false;\n\n    // candidate card should be from the same player\n    if (this.id != result.playerId) return false;\n\n    // Deck Can not Be empty\n    // if (this.isThereEmptyDeck() && this.remainedCard() > 3) return false;\n\n    if (this.trash!.selectedCard == Color.NotSelected) {\n      // this color type is not selected so far\n      return true;\n    } else if (\n      // the input card should be the same as before\n      (this.trash!.selectedCard == Color.True && result.value == true) ||\n      (this.trash!.selectedCard == Color.Zero && result.value == false)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  chunk(array: boolean[], size: number) {\n    var results = [];\n    while (array.length) {\n      results.push(array.splice(0, size));\n    }\n    return results;\n  }\n}\n"]}