{"version":3,"file":"ComputerPlay.js","sourceRoot":"","sources":["../../../src/types/binering/ComputerPlay.ts"],"names":[],"mappings":"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","sourcesContent":["import { GameStore } from '../../components/binering/store';\nimport { GenerateCardData } from './Card';\nimport { Game } from './Game';\nimport { Player } from './Player';\n\nexport class ComputerPlayer {\n  public static async fill_empty_deck(\n    myBoard: Player,\n    game: Game\n  ): Promise<boolean> {\n    var emptyDecks = myBoard.decks.filter(i => i.cards.length == 0);\n    if (emptyDecks.length > 1) {\n      alert(\n        'BUG: Blank Decks >1 : Would you please kindly send this bug to Hedayat with a screenshot'\n      );\n    }\n    if (emptyDecks.length == 1) {\n      const emptyDeck = emptyDecks[0];\n      const candidateDecks = myBoard.decks.filter(\n        i => i.id != emptyDeck.id && i.cards.length > 1\n      );\n      const selectedDeck =\n        candidateDecks[Math.floor(Math.random() * candidateDecks.length)];\n      const cardData = GenerateCardData(\n        myBoard.id,\n        selectedDeck.id,\n        selectedDeck.cards[selectedDeck.cards.length - 1]\n      );\n      await game.transfer_card(cardData, myBoard.id, emptyDeck.id);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public static async remove_card(\n    myBoard: Player,\n    game: Game\n  ): Promise<boolean> {\n    var decks = myBoard.decks.filter(\n      i => i.cards[i.cards.length - 1] == myBoard.trash!.value\n    );\n\n    var deck = decks[Math.floor(Math.random() * decks.length)];\n    if (deck != undefined) {\n      // move to trash\n      const cardData = GenerateCardData(\n        myBoard.id,\n        deck.id,\n        myBoard.trash!.value\n      );\n      await myBoard.remove_card(cardData);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private static async transfer_card_to_oponent(\n    opponent: Player,\n    myBoard: Player,\n    game: Game\n  ): Promise<boolean> {\n    var myDecks = myBoard.decks.filter(\n      i => i.cards[i.cards.length - 1] == !myBoard.trash!.value\n    );\n    var myDeck = myDecks[Math.floor(Math.random() * myDecks.length)];\n\n    var opponentdecks = opponent.decks.filter(i => i.cards.length < 8);\n    var opponentdeck =\n      opponentdecks[Math.floor(Math.random() * opponentdecks.length)];\n\n    if (myDeck != undefined && opponentdeck != undefined) {\n      const cardData = GenerateCardData(\n        myBoard.id,\n        myDeck.id,\n        !myBoard.trash!.value\n      );\n      await game.transfer_card(cardData, opponent.id, opponentdeck.id);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  static numerber = 0;\n  public static async Move(opponent: Player, myBoard: Player, game: Game) {\n    await delay(2000);\n    if (!(await ComputerPlayer.fill_empty_deck(myBoard, game))) {\n      if (!(await ComputerPlayer.remove_card(myBoard, game))) {\n        if (\n          !(await ComputerPlayer.transfer_card_to_oponent(\n            opponent,\n            myBoard,\n            game\n          ))\n        ) {\n          alert(\n            'BUG: there is no possible movement by computer. Would you please take screenshot for Hedayat'\n          );\n        }\n      }\n    }\n\n    GameStore.update(val => {\n      val = game;\n      return val;\n    });\n    await delay(1000);\n  }\n}\n\nfunction delay(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"]}