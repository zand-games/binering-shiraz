{"version":3,"file":"Deck.js","sourceRoot":"","sources":["../../../src/types/binering/Deck.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAGzC,MAAM,OAAO,IAAI;IAIf,YAAY,QAAgB,EAAE,MAAc,EAAE,KAAgB;QAD9D,UAAK,GAAc,EAAE,CAAC;QAEpB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAMM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IACM,UAAU;QACf,sCAAsC;QACtC,qDAAqD;QACrD,mEAAmE;QACnE,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1C,CAAC;IAEM,MAAM;QACX,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAEM,aAAa;QAClB,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;QAClE,wBAAwB;QACxB,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,uEAAuE;IACvE,wEAAwE;IACxE,4EAA4E;IACrE,eAAe,CAAC,GAAY;QACjC,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IACM,kCAAkC;QACvC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;QAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,OAAO,EAAE;YACnD,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAClB;IACH,CAAC;IAEM,aAAa,CAAC,KAAa,EAAE,kBAA2B;QAC7D,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;QACtC,YAAY;QACZ,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO,KAAK,CAAC;QAEzC,mCAAmC;QACnC,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE;YAClE,OAAO,KAAK,CAAC;QAEf,iDAAiD;QACjD,IAAI,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,EAAE;YAClE,OAAO,IAAI,CAAC;QAEd,6BAA6B;QAC7B,IAAI,kBAAkB;YAAE,OAAO,IAAI,CAAC;QAEpC,OAAO,KAAK,CAAC;IACf,CAAC;;AAxDa,oBAAe,GAAG,CAAC,GAAmB,EAAU,EAAE;IAC9D,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC;QAAE,OAAO,CAAC,CAAC;IACjE,OAAO,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC","sourcesContent":["import { parseCardInfo } from '../utils';\nimport { Player } from './Player';\nimport { Color } from './Trash';\nexport class Deck {\n  readonly playerId: number;\n  readonly id: string;\n  cards: boolean[] = [];\n  constructor(playerId: number, deckId: string, cards: boolean[]) {\n    this.playerId = playerId;\n    this.id = deckId;\n    this.cards = cards;\n  }\n  public static boolArrToNumber = (arr: Array<boolean>): number => {\n    if (arr == null || arr == undefined || arr.length == 0) return 0;\n    return parseInt(arr.map(r => (r ? '1' : '0')).join(''), 2);\n  };\n\n  public getCards() {\n    return this.cards;\n  }\n  public getDecimal() {\n    // var a = [false, true, false, true];\n    // var b: any = a.reduce((res, x) => (res << 1) | x);\n    // var result: any = this.cards.reduce((res, x) => (res << 1) | x);\n    return Deck.boolArrToNumber(this.cards);\n  }\n\n  public getHex() {\n    return this.getDecimal().toString(16);\n  }\n\n  public getPercentage(): string {\n    const result = ((this.getDecimal() * 100) / 255).toString() + '%';\n    //  console.log(result);\n    return result;\n  }\n  /// pop  :take the last item from array, we need it for Trash dragDrop.\n  // push  : add item to last postion. so we need it to internal movement.\n  //unshift : add item to first position. when oponent inject card to the deck\n  public howManyRemained(val: boolean) {\n    var item = 0;\n    this.cards.map(i => (i == val ? item++ : ''));\n    return item;\n  }\n  public removeSimilarCardsFromLastPosition() {\n    var cardVal = this.cards.pop();\n    while (this.cards[this.cards.length - 1] == cardVal) {\n      this.cards.pop();\n    }\n  }\n\n  public acceptNewCard(input: string, canOponentSendCard: boolean): boolean {\n    const cardInfo = parseCardInfo(input);\n    // I am full\n    if (this.cards.length == 8) return false;\n\n    // I do not accept card from myself\n    if (cardInfo.playerId == this.playerId && cardInfo.deckId == this.id)\n      return false;\n\n    // I can accept card from my side and other decks\n    if (cardInfo.playerId == this.playerId && cardInfo.deckId != this.id)\n      return true;\n\n    // I accept card from oponent\n    if (canOponentSendCard) return true;\n\n    return false;\n  }\n}\n"]}