{"version":3,"file":"Trash.js","sourceRoot":"","sources":["../../../src/types/binering/Trash.ts"],"names":[],"mappings":"AAAA,uDAAuD;AACvD,6BAA6B;AAC7B,WAAW;AACX,YAAY;AACZ,aAAa;AAEb,MAAM,CAAN,IAAY,KAIX;AAJD,WAAY,KAAK;IACf,iCAAQ,CAAA;IACR,iCAAQ,CAAA;IACR,+CAAe,CAAA;AACjB,CAAC,EAJW,KAAK,KAAL,KAAK,QAIhB;AAED,MAAM,OAAO,KAAK;IAIhB,YAAY,QAAgB;QAF5B,iBAAY,GAAU,KAAK,CAAC,WAAW,CAAC;QAGtC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACD,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,YAAY,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACxD,CAAC;IAEM,QAAQ,CAAC,KAAc;QAC5B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IACtD,CAAC;CACF","sourcesContent":["// Format of incoming valid data from card on Drag&Drop\n// PlayerId||CardType||DeckId\n// example:\n// 1||one||A\n// 2||zero||C\n\nexport enum Color {\n  Zero = 0,\n  True = 1,\n  NotSelected = 2,\n}\nimport { parseCardInfo } from '../utils';\nexport class Trash {\n  readonly playerId?: number;\n  selectedCard: Color = Color.NotSelected;\n\n  constructor(playerId: number) {\n    this.playerId = playerId;\n  }\n  public get value() {\n    return this.selectedCard == Color.True ? true : false;\n  }\n\n  public setColor(value: boolean) {\n    this.selectedCard = value ? Color.True : Color.Zero;\n  }\n}\n"]}