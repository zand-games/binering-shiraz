{"version":3,"file":"Game.js","sourceRoot":"","sources":["../../../src/types/binering/Game.ts"],"names":[],"mappings":"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","sourcesContent":["import { MoveEventInfo, Player } from './Player';\nimport { Color } from './Trash';\nimport { parseCardInfo } from '../utils';\nimport { HtmlTagHydration } from 'svelte/internal';\nimport { ComputerPlayer } from './ComputerPlay';\nexport enum PlayeType {\n  Single = 1,\n  MultiPlayer = 2,\n}\ninterface Round {\n  round_looserid: number;\n  score: number;\n}\nexport interface Coordination {\n  latitude: string;\n  longitude: string;\n}\nexport class Game {\n  public players: Record<number, Player> = {};\n  private player1!: Player;\n  private player2!: Player;\n  public looser?: string;\n  public playType: PlayeType = PlayeType.Single;\n  public rounds: Array<Round> = [];\n  public game_finished: boolean = false;\n  public round_finished: boolean = false;\n  public location: string = 'Shiraz, Iran';\n  public coordination: string = 'Shiraz, Iran';\n  public locationUrl: string = '';\n  public locations: Array<Coordination> = [];\n  constructor() {\n    this.startNewGame();\n  }\n\n  public get goole_map_current_location() {\n    return (\n      'http://maps.google.com/maps?z=20&q=' +\n      this.latitute +\n      ',' +\n      this.longtitude\n    );\n  }\n  public get latitute() {\n    if (this.players[1].isLatitute) {\n      return this.players[1].get_location();\n    } else {\n      return this.players[2].get_location();\n    }\n    return '0';\n  }\n\n  public get longtitude() {\n    if (this.players[1].isLatitute) {\n      return this.players[2].get_location();\n    } else {\n      return this.players[1].get_location();\n    }\n  }\n\n  public ResumeGame(game_hash: String) {\n    // fetch game from DHT\n  }\n  public async startNewGame() {\n    this.looser = '';\n    this.rounds = [];\n    this.game_finished = false;\n    this.round_finished = false;\n\n    if (this.playType == PlayeType.Single) {\n      this.player1 = new Player(1, 'Player 1', false);\n      this.player2 = new Player(2, 'Computer', true);\n    } else {\n      this.player1 = new Player(1, 'Player 1', false);\n      this.player2 = new Player(2, 'Player 2', false);\n    }\n\n    this.player1.turn = true;\n\n    this.player1.onRemoveCard = async data => {\n      await this.onRemoveCardEventHandler(data, this);\n    };\n    this.player2.onRemoveCard = async data => {\n      await this.onRemoveCardEventHandler(data, this);\n    };\n    this.players = { 1: this.player1, 2: this.player2 };\n    this.coordination = this.latitute + ',' + this.longtitude;\n    this.locations = [];\n    this.locations.push({\n      latitude: this.latitute,\n      longitude: this.longtitude,\n    });\n  }\n\n  public async startNewRound() {\n    this.looser = '';\n    this.game_finished = false;\n    this.round_finished = false;\n\n    this.player1.new_round();\n    this.player2.new_round();\n\n    if (this.rounds.length % 2 == 0) this.changeTurn(2);\n    else this.changeTurn(1);\n\n    this.locations = [];\n    this.locations.push({\n      latitude: this.latitute,\n      longitude: this.longtitude,\n    });\n  }\n  private async onRemoveCardEventHandler(\n    data: MoveEventInfo,\n    game: Game\n  ): Promise<void> {\n    var oponent = game.getOponent(data.player.id);\n    await this.changeTurn(data.player.id);\n    if (data.player.trash?.selectedCard == Color.NotSelected)\n      data.player.trash.setColor(data.playedCard);\n\n    if (oponent.trash?.selectedCard == Color.NotSelected) {\n      oponent.trash.setColor(!data.playedCard);\n    }\n    // find_location(this);\n    this.locations.push({\n      latitude: this.latitute,\n      longitude: this.longtitude,\n    });\n  }\n  private calc_score(winner: Player, looser: Player) {\n    var count = 0;\n    winner.decks.forEach(dec => (count += dec.cards.length));\n    looser.decks.forEach(dec => (count += dec.cards.length));\n    return -count;\n  }\n\n  private check_game_looer(round_looserid: number) {\n    const count = this.getScore(round_looserid);\n\n    if (Math.abs(count) >= 21) {\n      this.looser = this.players[round_looserid].name + ' lost the game! ';\n\n      this.game_finished = true;\n    }\n  }\n  private check_round_looser() {\n    if (this.player1.remainedCard() == 0) {\n      const score = this.calc_score(this.player1, this.player2);\n      this.looser = this.player2.name + ' lost the round!  Score:' + score;\n      this.rounds.push({\n        round_looserid: this.player2.id,\n        score: score,\n      });\n      this.round_finished = true;\n      this.check_game_looer(this.player2.id);\n    }\n    if (this.player2.remainedCard() == 0) {\n      const score = this.calc_score(this.player2, this.player1);\n      this.looser = this.player1.name + ' lost the round! Score:' + score;\n      this.round_finished = true;\n      this.rounds.push({\n        round_looserid: this.player1.id,\n        score: score,\n      });\n      this.check_game_looer(this.player1.id);\n    }\n  }\n  public getScore(playerId: number) {\n    var count = 0;\n    this.rounds\n      .filter(i => i.round_looserid == playerId)\n      .map(j => (count += j.score));\n    return count;\n  }\n  public async changeTurn(playerId?: number) {\n    if (!playerId) {\n      // color is already selected\n      if (this.players[1].turn) {\n        this.players[1].turn = false;\n        this.players[2].turn = true;\n      } else {\n        this.players[1].turn = true;\n        this.players[2].turn = false;\n      }\n    } else {\n      this.players[playerId!].turn = false;\n      this.getOponent(playerId).turn = true;\n    }\n    this.check_round_looser();\n\n    if (this.round_finished == false) {\n      if (this.player2.isComputer && this.player2.turn) {\n        ComputerPlayer.Move(this.player1, this.player2, this);\n      }\n    }\n  }\n  public getOponent(playerId: number) {\n    if (playerId == 1) return this.players[2];\n    else if (playerId == 2) return this.players[1];\n    else throw new Error('PlayerId is invalid!');\n  }\n\n  public async transfer_card(\n    input: string,\n    target_player: number,\n    target_deck: string\n  ) {\n    const source_card = parseCardInfo(input);\n    if (source_card.dataIsValid == false) return;\n\n    // it is not your turn to play\n    if (this.players[source_card.playerId!].turn == false) return;\n    if (source_card.playerId == target_player) {\n      //internal move\n      this.players[target_player]\n        .getDeck(target_deck)\n        ?.cards.push(source_card.value!);\n      this.players[target_player].getDeck(source_card.deckId!)?.cards.pop();\n    } else {\n      // moved from oponent\n      this.players[target_player]\n        .getDeck(target_deck)\n        ?.cards.unshift(source_card.value!);\n      this.players[source_card.playerId!]\n        .getDeck(source_card.deckId!)\n        ?.cards.pop();\n    }\n\n    this.locations.push({\n      latitude: this.latitute,\n      longitude: this.longtitude,\n    });\n    await this.changeTurn();\n  }\n}\n"]}